<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lunar Lander DQN Agent</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        h1 {
            text-align: center;
            color: #4CAF50;
        }
        p {
            text-align: center;
            margin: 5px 0;
        }
        strong {
            color: #3498DB;
        }
        em {
            color: #7D3C98;
        }
        hr {
            border: 1px solid #E74C3C;
        }
        h2 {
            color: #F39C12;
        }
        h3 {
            color: #F39C12;
        }
        h4 {
            color: #E74C3C;
        }
        ul, ol {
            color: #2E4053;
        }
        code {
            background-color: #e8e8e8;
            padding: 2px 4px;
            border-radius: 4px;
        }
        pre {
            background-color: #e8e8e8;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            color: #7D3C98;
        }
    </style>
</head>
<body>

    <h1>Lunar Lander DQN Agent</h1>

    <p>
        <strong>Author:</strong> Huy Quoc Nguyen <br/>
        <strong>Class:</strong> CPSC 3500 - Operating Systems
    </p>

    <p>
        <em>A project implementing a Deep Q-Network agent to land a spacecraft on the moon using reinforcement learning.</em>
    </p>

    <hr/>

    <h2>Project Overview</h2>
    <p>This project demonstrates the use of <strong>Deep Q-Learning</strong> to train an agent that learns to land a spacecraft in the <strong>Lunar Lander</strong> environment.</p>

    <h3>Key Features:</h3>
    <ul>
        <li>Utilizes <strong>reinforcement learning</strong> techniques.</li>
        <li>Custom neural network architecture for Q-learning.</li>
        <li>Experience replay buffer for improved learning efficiency.</li>
        <li>Evaluation of agent performance over multiple episodes.</li>
    </ul>

    <h2>Technologies Used</h2>
    <ul>
        <li><strong>Python</strong>: Core programming language.</li>
        <li><strong>PyTorch</strong>: For building and training neural networks.</li>
        <li><strong>OpenAI Gym</strong>: For the Lunar Lander environment.</li>
        <li><strong>Numpy</strong>: For numerical computations.</li>
    </ul>

    <h2>Setup and Usage</h2>

    <h3>Installation</h3>
    <p>To set up the project, ensure you have the following dependencies installed:</p>
    <pre><code>pip install gym
pip install torch
pip install numpy
    </code></pre>

    <h3>Training the Agent</h3>
    <p>The agent is trained over a specified number of episodes:</p>
    <pre><code>number_episodes = 2000
maximum_number_timesteps_per_episode = 1000
    </code></pre>

    <h2>Sample Output</h2>
    <p>After training, the agent successfully lands the spacecraft with an average score exceeding 200 over 100 episodes.</p>

    <h2>Future Improvements</h2>
    <ul>
        <li><strong>Hyperparameter Tuning</strong>: Experiment with different learning rates and architectures.</li>
        <li><strong>Improved Visualization</strong>: Add visual output of the agent's performance.</li>
        <li><strong>Multi-Agent Training</strong>: Explore training multiple agents for competitive learning.</li>
    </ul>

    <hr/>
    <div class="footer">
        <p>Made with ❤️ by Huy Quoc Nguyen</p>
    </div>

</body>
</html>
